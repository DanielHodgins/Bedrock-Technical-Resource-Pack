name: Release Resource Pack

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on semantic version tags like v1.2.3

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for pushing changes and creating releases
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Pillow numpy

      - name: Fix transparent images
        run: python clearPictureFixer.py
        
      - name: Extract version from tag
        id: get_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          # Parse version components
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

      - name: Update version in manifest.json
        run: |
          jq '.header.version = [${{ steps.get_version.outputs.major }}, ${{ steps.get_version.outputs.minor }}, ${{ steps.get_version.outputs.patch }}] | .header.name = "BE_Tech_RP_v${{ steps.get_version.outputs.major }}.${{ steps.get_version.outputs.minor }}.${{ steps.get_version.outputs.patch }}"' manifest.json > manifest.json.tmp
          mv manifest.json.tmp manifest.json

      - name: Commit and push updated manifest.json
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add manifest.json
          git commit -m "chore: update version to v${{ steps.get_version.outputs.version }} in manifest.json [skip ci]"
          git push origin HEAD:${GITHUB_REF_NAME%%/*}

      - name: Create .mcpack file
        id: create_mcpack
        run: |
          MCPACK_NAME="Bedrock-Technical-Resource-Pack-v${{ steps.get_version.outputs.version }}.mcpack"
          zip -r Bedrock-Technical-Resource-Pack-v${{ steps.get_version.outputs.version }}.zip ./* \
            -x "*.git*" \
            -x ".github/*" \
            -x "*.md" \
            -x "clearPictureFixer.py" \
            -x "LICENSE"
          mv Bedrock-Technical-Resource-Pack-v${{ steps.get_version.outputs.version }}.zip $MCPACK_NAME
          echo "mcpack_path=$MCPACK_NAME" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the mcpack file
            const mcpackPath = '${{ steps.create_mcpack.outputs.mcpack_path }}';
            const mcpackData = fs.readFileSync(mcpackPath);
            
            // Create the release with auto-generated notes
            const { data: releaseData } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: 'Release v${{ steps.get_version.outputs.version }}',
              generate_release_notes: true
            });
            
            // Upload the mcpack asset
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseData.id,
              name: mcpackPath,
              data: mcpackData
            });
